"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[6121],{72066:(e,n,d)=>{d.r(n),d.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>a});var t=d(85893),i=d(11151);const o={sidebar_position:21},r="Applying the models",s={id:"docs/walkthrough/apply_models",title:"Applying the models",description:"Model and Predictor instances may be applied directly to data in the database without first fetching the data client-side.",source:"@site/content/docs/walkthrough/apply_models.md",sourceDirName:"docs/walkthrough",slug:"/docs/walkthrough/apply_models",permalink:"/docs/docs/walkthrough/apply_models",draft:!1,unlisted:!1,editUrl:"https://github.com/SuperDuperDB/superduperdb/blob/main/docs/hr/content/docs/walkthrough/apply_models.md",tags:[],version:"current",sidebarPosition:21,frontMatter:{sidebar_position:21},sidebar:"tutorialSidebar",previous:{title:"Training models directly on your datastore",permalink:"/docs/docs/walkthrough/training_models"},next:{title:"Configuring models to ingest features from other models",permalink:"/docs/docs/walkthrough/linking_interdependent_models"}},l={},a=[{value:"Procedural API",id:"procedural-api",level:2},{value:"Out-of-database prediction",id:"out-of-database-prediction",level:3},{value:"In-database, one-time model prediction",id:"in-database-one-time-model-prediction",level:3},{value:"MongoDB",id:"mongodb",level:4},{value:"SQL",id:"sql",level:4},{value:"In database, daemonized model predictions with <code>listen=True</code>",id:"in-database-daemonized-model-predictions-with-listentrue",level:3},{value:"Activating models for vector-search with <code>create_vector_index=True</code>",id:"activating-models-for-vector-search-with-create_vector_indextrue",level:3},{value:"Predictions by framework",id:"predictions-by-framework",level:2},{value:"Custom",id:"custom",level:3},{value:"Sklearn",id:"sklearn",level:3},{value:"Transformers",id:"transformers",level:3},{value:"PyTorch",id:"pytorch",level:3},{value:"OpenAI",id:"openai",level:3},{value:"Predicting based on the <code>identifier</code> via the <code>Datalayer</code>",id:"predicting-based-on-the-identifier-via-the-datalayer",level:2},{value:"Models with special outputs",id:"models-with-special-outputs",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"applying-the-models",children:"Applying the models"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Model"})," and ",(0,t.jsx)(n.code,{children:"Predictor"})," instances may be applied directly to data in the database without first fetching the data client-side."]}),"\n",(0,t.jsx)(n.h2,{id:"procedural-api",children:"Procedural API"}),"\n",(0,t.jsxs)(n.p,{children:["Applying a model to data, is straightforward with ",(0,t.jsx)(n.code,{children:"Model.predict"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"out-of-database-prediction",children:"Out-of-database prediction"}),"\n",(0,t.jsxs)(n.p,{children:["As is standard in ",(0,t.jsx)(n.code,{children:"sklearn"})," and other AI libraries and frameworks, such as ",(0,t.jsx)(n.code,{children:"tensorflow.keras"}),",\nall ",(0,t.jsx)(n.code,{children:"superduperdb"})," models, support ",(0,t.jsx)(n.code,{children:".predict"}),", predicting directly on datapoints.\nTo use this functionality, supply the datapoints directly to the ",(0,t.jsx)(n.code,{children:"Model"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"my_model = ...  # code to instantiate model\n\nmy_model.predict(X=[<input_datum> for _ in range(num_data_points)])\n"})}),"\n",(0,t.jsx)(n.p,{children:"If only a single prediction is desired, then:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"my_model.predict(X=<input_datum>, one=True)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"in-database-one-time-model-prediction",children:"In-database, one-time model prediction"}),"\n",(0,t.jsxs)(n.p,{children:["It is possible to apply a model directly to the database with ",(0,t.jsx)(n.code,{children:"Model.predict"}),".\nIn this context, the parameter ",(0,t.jsx)(n.code,{children:"X"})," refers to the field/column of data which is passed to the model.\n",(0,t.jsx)(n.code,{children:'X="_base"'})," passes all of the data (all columns/ fields)."]}),"\n",(0,t.jsx)(n.h4,{id:"mongodb",children:"MongoDB"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"my_model = ...  # code to instantiate model\n\nmy_model.predict(\n    X='<input-field>',\n    db=db,\n    select=Collection('<my-collection>').find(),\n)\n"})}),"\n",(0,t.jsx)(n.h4,{id:"sql",children:"SQL"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"table = db.load('my-table', 'table_or_collection')\n\nmy_model = ...  # code to instantiate model\n\nmy_model.predict(\n    X='myfield',\n    db=db,\n    select=table.filter(table.brand == 'Nike').select(table.myfield),\n)\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"in-database-daemonized-model-predictions-with-listentrue",children:["In database, daemonized model predictions with ",(0,t.jsx)(n.code,{children:"listen=True"})]}),"\n",(0,t.jsx)(n.p,{children:"If is also possible to apply a model to create predictions, and also\nrefresh these predictions, whenever new data comes in:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"my_model.predict(\n    X='<input-field>',\n    db=db,\n    select=query,\n    listen=True,\n)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Under-the-hood, this call creates a ",(0,t.jsx)(n.code,{children:"Listener"})," which is deployed on\nthe query passed to the ",(0,t.jsx)(n.code,{children:".predict"})," call."]}),"\n",(0,t.jsxs)(n.p,{children:["Read more about the ",(0,t.jsx)(n.code,{children:"Listener"})," abstraction ",(0,t.jsx)(n.a,{href:"/docs/docs/walkthrough/daemonizing_models_with_listeners",children:"here"})]}),"\n",(0,t.jsxs)(n.h3,{id:"activating-models-for-vector-search-with-create_vector_indextrue",children:["Activating models for vector-search with ",(0,t.jsx)(n.code,{children:"create_vector_index=True"})]}),"\n",(0,t.jsxs)(n.p,{children:["If a model outputs vectors, it is possible to create a ",(0,t.jsx)(n.code,{children:"VectorIndex"}),"\nin SuperDuperDB, inline, during applying a model:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"my_model.predict(\n    X='<input-field>',\n    db=db,\n    select=query,\n    create_vector_index=True,\n)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"predictions-by-framework",children:"Predictions by framework"}),"\n",(0,t.jsx)(n.h3,{id:"custom",children:"Custom"}),"\n",(0,t.jsxs)(n.p,{children:["By default, the ",(0,t.jsx)(n.code,{children:"Model"})," component supports arbitrary callables to be used to\nperform model predictions and transformations:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from superduperdb import Model\n\ndef chunk_text(x):\n    return x.split('\\n\\n')\n\nm = Model('my-chunker', object=chunk_text)\n\nm.predict(\n    X='<input>',\n    select=<query>,   # MongoDB, Ibis or SQL query\n    db=db,\n)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"sklearn",children:"Sklearn"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from superduperdb.ext.sklearn import Estimator\nfrom sklearn.svm import SVC\n\nm = Estimator(SVC())\n\nm.predict(\n    X='<input>',\n    select=<query>,  # MongoDB, Ibis or SQL query\n    db=db,\n)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"transformers",children:"Transformers"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from superduperdb.ext.transformers import Pipeline\nfrom superduperdb import superduper\n\nm = Pipeline(task='sentiment-analysis')\n\nm.predict(\n    X='<input>',\n    db=db,\n    select=<query>,  # MongoDB, Ibis or SQL query\n    batch_size=100,  # any **kwargs supported by `transformers.Pipeline.__call__`\n)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"pytorch",children:"PyTorch"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"import torch\nfrom superduperdb.ext.torch import Module\n\nmodel = Module(\n    'my-classifier',\n    preprocess=lambda x: torch.tensor(x),\n    object=torch.nn.Linear(64, 512),\n    postprocess=lambda x: x.topk(1)[0].item(),\n)\n\nmodel.predict(\n    X='<input>',\n    db=db,\n    select=<query>,  # MongoDB, Ibis or SQL query\n    batch_size=100,  # any **kwargs supported by `torch.utils.data.DataLoader`\n    num_workers=4,\n)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"openai",children:"OpenAI"}),"\n",(0,t.jsx)(n.p,{children:"Embeddings:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from superduperdb.ext.openai import OpenAIEmbedding\n\nm = OpenAIEmbedding(identifier='text-embedding-ada-002')\n\nm.predict(\n    X='<input>',\n    db=db,\n    select=<query>,  # MongoDB, Ibis or SQL query\n)\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"predicting-based-on-the-identifier-via-the-datalayer",children:["Predicting based on the ",(0,t.jsx)(n.code,{children:"identifier"})," via the ",(0,t.jsx)(n.code,{children:"Datalayer"})]}),"\n",(0,t.jsxs)(n.p,{children:["Instead of calling the model directly, it's also possible to\npredict on single data points using ",(0,t.jsx)(n.code,{children:"db.predict"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"I.e. the following are equivalent:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"my_model = Model('my-model', model_object) # code to instantiate model\n\nmy_model.predict(X=<input_datum>)\n"})}),"\n",(0,t.jsx)(n.p,{children:"... and"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"my_model = Model('my-model', model_object) # code to instantiate model\n\ndb.add(my_model)\ndb.predict('my-model', input=<input_datum>)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Using ",(0,t.jsx)(n.code,{children:"db.predict"}),", model predictions may be augmented with data from the database.\nI.e. the following are equivalent:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"db.predict('my-model', input=<input_data>, context_select=<query>)\n"})}),"\n",(0,t.jsx)(n.p,{children:"... and"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"context = db.execute(query)\nmy_model.predict(<input_data>, context=context)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"models-with-special-outputs",children:"Models with special outputs"}),"\n",(0,t.jsxs)(n.p,{children:["If a model has outputs which aren't directly compatible with the underlying database, then one adds either\nan ",(0,t.jsx)(n.code,{children:"Encoder"})," or a ",(0,t.jsx)(n.code,{children:"Schema"})," to the ",(0,t.jsx)(n.code,{children:"Model"})," at initialization."]}),"\n",(0,t.jsx)(n.p,{children:"Here's a model which outputs images:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from superduperdb.ext.pillow import pil_image\n\nmy_model = Model('my-model', model_object, encoder=pil_image)\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Here's a model which outputs dictionaries with ",(0,t.jsx)(n.code,{children:'"img"'})," (images) and ",(0,t.jsx)(n.code,{children:'"txt"'})," (string) fields:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from superduperdb import Schema\n\nschema = Schema('my-schema', fields={'img': pil_image, 'txt': 'str'})\nmy_model = Model('my-model', model_object, schema=schema)\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},11151:(e,n,d)=>{d.d(n,{Z:()=>s,a:()=>r});var t=d(67294);const i={},o=t.createContext(i);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);