"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[9493],{24387:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>a});var s=r(85893),d=r(11151);const i={sidebar_position:18},t="Adding Models to the Database",o={id:"docs/walkthrough/ai_models",title:"Adding Models to the Database",description:"SuperDuperDB integrates with both AI models and AI APIs",source:"@site/content/docs/walkthrough/ai_models.md",sourceDirName:"docs/walkthrough",slug:"/docs/walkthrough/ai_models",permalink:"/docs/docs/walkthrough/ai_models",draft:!1,unlisted:!1,editUrl:"https://github.com/SuperDuperDB/superduperdb/blob/main/docs/hr/content/docs/walkthrough/ai_models.md",tags:[],version:"current",sidebarPosition:18,frontMatter:{sidebar_position:18},sidebar:"tutorialSidebar",previous:{title:"Selecting data",permalink:"/docs/docs/walkthrough/selecting_data"},next:{title:"Training models directly on your datastore",permalink:"/docs/docs/walkthrough/training_models"}},l={},a=[{value:"Using AI Models",id:"using-ai-models",level:2},{value:"Vanilla",id:"vanilla",level:3},{value:"Scikit-Learn",id:"scikit-learn",level:3},{value:"Transformers",id:"transformers",level:3},{value:"PyTorch",id:"pytorch",level:3},{value:"Important Parameters, Common to All Models",id:"important-parameters-common-to-all-models",level:3},{value:"Using AI APIs",id:"using-ai-apis",level:2},{value:"OpenAI",id:"openai",level:3},{value:"Cohere",id:"cohere",level:3},{value:"Anthropic",id:"anthropic",level:3},{value:"Jina",id:"jina",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,d.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"adding-models-to-the-database",children:"Adding Models to the Database"}),"\n",(0,s.jsx)(n.p,{children:"SuperDuperDB integrates with both AI models and AI APIs"}),"\n",(0,s.jsx)(n.h2,{id:"using-ai-models",children:"Using AI Models"}),"\n",(0,s.jsxs)(n.p,{children:["AI models may be wrapped and used in ",(0,s.jsx)(n.code,{children:"superduperdb"})," with the ",(0,s.jsx)(n.code,{children:"Model"})," class and descendants."]}),"\n",(0,s.jsxs)(n.p,{children:["Model instances may be saved to ",(0,s.jsx)(n.code,{children:"superduperdb"})," using ",(0,s.jsx)(n.code,{children:"db.add"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"vanilla",children:"Vanilla"}),"\n",(0,s.jsxs)(n.p,{children:["By default, the ",(0,s.jsx)(n.code,{children:"Model"})," component supports arbitrary callables to be used to perform model predictions and transformations:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from superduperdb import Model\n\ndef chunk_text(x):\n    return x.split('\\n\\n')\n\ndb.add(\n    Model(identifier='my-chunker', object=chunk_text)\n)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"scikit-learn",children:"Scikit-Learn"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from superduperdb.ext.sklearn import Estimator\nfrom sklearn.svm import SVC\n\ndb.add(Estimator(SVC()))\n"})}),"\n",(0,s.jsx)(n.h3,{id:"transformers",children:"Transformers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from superduperdb.ext.transformers import Pipeline\nfrom superduperdb import superduper\n\ndb.add(Pipeline(task='sentiment-analysis'))\n"})}),"\n",(0,s.jsxs)(n.p,{children:["There is also support for building the pipeline in separate stages with a high degree of customization.\nThe following is a speech-to-text model published by ",(0,s.jsx)(n.a,{href:"https://arxiv.org/abs/2010.05171",children:"facebook research"})," and shared ",(0,s.jsx)(n.a,{href:"https://huggingface.co/facebook/s2t-small-librispeech-asr",children:"on Hugging-Face"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from superduperdb.ext.transformers import Pipeline\nfrom transformers import Speech2TextProcessor, Speech2TextForConditionalGeneration\n\nmodel = Speech2TextForConditionalGeneration.from_pretrained(\"facebook/s2t-small-librispeech-asr\")\nprocessor = Speech2TextProcessor.from_pretrained(\"facebook/s2t-small-librispeech-asr\")\n\ntranscriber = Pipeline(\n    identifier='transcription',\n    object=model,\n    preprocess=processor,\n    preprocess_kwargs={'sampling_rate': SAMPLING_RATE, 'return_tensors': 'pt', 'padding': True}, # Please replace the placeholder `SAMPLING_RATE` with the appropriate value in your context.\n    postprocess=lambda x: processor.batch_decode(x, skip_special_tokens=True),\n    predict_method='generate',\n    preprocess_type='other',\n)\n\ndb.add(transcriber)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"pytorch",children:"PyTorch"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import torch\nfrom superduperdb.ext.torch import Module\n\nmodel = Module(\n    identifier='my-classifier',\n    preprocess=lambda x: torch.tensor(x),\n    object=torch.nn.Linear(64, 512),\n    postprocess=lambda x: x.topk(1)[0].item(),\n)\n\ndb.add(model)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"important-parameters-common-to-all-models",children:"Important Parameters, Common to All Models"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Name"}),(0,s.jsx)(n.th,{children:"Function"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"identifier"})}),(0,s.jsxs)(n.td,{children:["A unique name for ",(0,s.jsx)(n.code,{children:"superduperdb"}),", for later use and recall"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"object"})}),(0,s.jsx)(n.td,{children:"The model-object, including parameters and hyper-parameters providing heavy lifting"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"preprocess"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"Callable"})," which processes individual rows/records/fields from the database prior to passing to the model"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"postprocess"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"Callable"})," applied to individual rows/items or output"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"encoder"})}),(0,s.jsxs)(n.td,{children:["An ",(0,s.jsx)(n.code,{children:"Encoder"})," instance applied to the model output to save that output in the database"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"schema"})}),(0,s.jsxs)(n.td,{children:["A ",(0,s.jsx)(n.code,{children:"Schema"})," instance applied to a model's output, whose rows are dictionaries"]})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"using-ai-apis",children:"Using AI APIs"}),"\n",(0,s.jsxs)(n.p,{children:["In SuperDuperDB, developers are able to interact with popular AI API providers, in a way very similar to\n",(0,s.jsx)(n.a,{href:"/docs/docs/walkthrough/ai_models",children:"integrating with AI open-source or home-grown models"}),". Instantiating a model from\nthese providers is similar to instantiating a ",(0,s.jsx)(n.code,{children:"Model"}),":"]}),"\n",(0,s.jsx)(n.h3,{id:"openai",children:"OpenAI"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Supported"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Class-name"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Embeddings"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"OpenAIEmbedding"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Chat models"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"OpenAIChatCompletion"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Image generation models"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"OpenAIImageCreation"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Image edit models"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"OpenAIImageEdit"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Audio transcription models"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"OpenAIAudioTranscription"})})]})]})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from superduperdb.ext.openai import OpenAI<ModelType> as ModelCls\n\ndb.add(Modelcls(identifier='my-model', **kwargs))\n"})}),"\n",(0,s.jsx)(n.h3,{id:"cohere",children:"Cohere"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Supported"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Class-name"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Embeddings"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"CohereEmbedding"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Chat models"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"CohereChatCompletion"})})]})]})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from superduperdb.ext.cohere import Cohere<ModelType> as ModelCls\n\ndb.add(Modelcls(identifier='my-model', **kwargs))\n"})}),"\n",(0,s.jsx)(n.h3,{id:"anthropic",children:"Anthropic"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Supported"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Class-name"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Chat models"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"AnthropicCompletions"})})]})})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from superduperdb.ext.anthropic import Anthropic<ModelType> as ModelCls\n\ndb.add(Modelcls(identifier='my-model', **kwargs))\n"})}),"\n",(0,s.jsx)(n.h3,{id:"jina",children:"Jina"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Supported"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Class-name"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Embeddings"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"JinaEmbedding"})})]})})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from superduperdb.ext.jina import JinaEmbedding\n\ndb.add(JinaEmbedding(identifier='jina-embeddings-v2-base-en', api_key='JINA_API_KEY')) # You can also set JINA_API_KEY as environment variable\n"})})]})}function h(e={}){const{wrapper:n}={...(0,d.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>o,a:()=>t});var s=r(67294);const d={},i=s.createContext(d);function t(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:t(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);