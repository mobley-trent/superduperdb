"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[6910],{86852:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>a,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=t(85893),i=t(11151);const o={sidebar_position:25},s="Setting up and accessing vector-search",c={id:"docs/walkthrough/vector_search",title:"Setting up and accessing vector-search",description:"Vector-search refers to the task of searching through vectors",source:"@site/content/docs/walkthrough/vector_search.md",sourceDirName:"docs/walkthrough",slug:"/docs/walkthrough/vector_search",permalink:"/docs/docs/walkthrough/vector_search",draft:!1,unlisted:!1,editUrl:"https://github.com/SuperDuperDB/superduperdb/blob/main/docs/hr/content/docs/walkthrough/vector_search.md",tags:[],version:"current",sidebarPosition:25,frontMatter:{sidebar_position:25},sidebar:"tutorialSidebar",previous:{title:"Configuring models to ingest features from other models",permalink:"/docs/docs/walkthrough/linking_interdependent_models"},next:{title:"Serializing components with SuperDuperDB",permalink:"/docs/docs/walkthrough/serialization"}},d={},l=[{value:"Procedural API setup",id:"procedural-api-setup",level:2},{value:"Declarative API setup",id:"declarative-api-setup",level:2},{value:"Querying the <code>VectorIndex</code> with the hybrid query-API",id:"querying-the-vectorindex-with-the-hybrid-query-api",level:2},{value:"PyMongo",id:"pymongo",level:3},{value:"SQL",id:"sql",level:3}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"setting-up-and-accessing-vector-search",children:"Setting up and accessing vector-search"}),"\n",(0,r.jsx)(n.p,{children:"Vector-search refers to the task of searching through vectors\nwhich are created as the output of an AI model."}),"\n",(0,r.jsx)(n.h2,{id:"procedural-api-setup",children:"Procedural API setup"}),"\n",(0,r.jsxs)(n.p,{children:["With the procedural API, a ",(0,r.jsx)(n.code,{children:".predict"})," can be used to configure vector-search\nif the vector-search should only be accessible to one model."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from superduperdb import vector\n\n# m is a model which outputs vectors.\n# this is signified with the `vector`, an `Encoder`\nm = Model(\n    ...,\n    encoder=vector(shape=(256,))\n)\n\nm.predict(\n    X='txt',\n    select=collection.find(),\n    create_vector_index=True,\n)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"declarative-api-setup",children:"Declarative API setup"}),"\n",(0,r.jsx)(n.p,{children:"With the declarative API, it's possible to create two models\nwhich are compatible with the vectors for performing searches:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from superduperdb import Listener, VectorIndex, vector\n\ndb.add(\n    VectorIndex(\n        indexing_listener=Listener(\n            model=model_1,    # both models output vectors\n            key='key-1',\n            select=collection.find(),   # portion of data to calculate vectors for\n        ),\n        compatible_listener=Listener(\n            model=model_2,\n            key='key-2',\n            active=False,     # this listener doesn't compute vectors on incoming data\n        )\n    )\n)\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"querying-the-vectorindex-with-the-hybrid-query-api",children:["Querying the ",(0,r.jsx)(n.code,{children:"VectorIndex"})," with the hybrid query-API"]}),"\n",(0,r.jsx)(n.p,{children:"SuperDuperDB supports queries via:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"pymongo"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"ibis"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Read more about this ",(0,r.jsx)(n.a,{href:"/docs/docs/data_integrations/supported_query_APIs",children:"here"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["In order to use vector-search in a query, one combines these APIs with the ",(0,r.jsx)(n.code,{children:".like"})," operator."]}),"\n",(0,r.jsxs)(n.p,{children:["The order of the standard parts of the query and ",(0,r.jsx)(n.code,{children:".like"})," may be permuted. This gives\n2 different algorithms:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Find similar items based on ",(0,r.jsx)(n.code,{children:'txt="something like this"'})]}),"\n",(0,r.jsxs)(n.li,{children:["Filter these where these similar items have the brand ",(0,r.jsx)(n.code,{children:'"Nike"'})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"...versus:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Find items with the brand ",(0,r.jsx)(n.code,{children:'"Nike"'})]}),"\n",(0,r.jsxs)(n.li,{children:["Find where these items are similar to ",(0,r.jsx)(n.code,{children:'"something like this"'})," based on the ",(0,r.jsx)(n.code,{children:'"txt"'})," field"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"pymongo",children:"PyMongo"}),"\n",(0,r.jsxs)(n.p,{children:["In ",(0,r.jsx)(n.code,{children:"pymongo"})," one does:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from superduperdb import Document\nfrom superduperdb.backends.mongodb import Collection\n\ncollection = Collection('mycollection')\n\ndb.execute(\n    collection\n        .like(Document({'txt': 'something like this'}, vector_index='my-index'))\n        .find({'brand': 'Nike'}, {'txt': 1})\n)\n"})}),"\n",(0,r.jsx)(n.p,{children:"... or"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"db.execute(\n    collection\n        .like(Document({'txt': 'something like this'}, vector_index='my-index'))\n        .find({'brand': 'Nike'}, {'txt': 1})\n)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"sql",children:"SQL"}),"\n",(0,r.jsxs)(n.p,{children:["First you need to have set-up a table. Read how to do that ",(0,r.jsx)(n.a,{href:"/docs/docs/data_integrations/sql",children:"here"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from superduperdb import Document\n\nmy_table = db.load('my_table', 'table')\n\ndb.execute(\n    my_table\n        .like(Document({'txt': 'something like this'}), index='my-index')\n        .filter(my_table.brand == 'Nike')\n        .limit(10)\n)\n"})}),"\n",(0,r.jsx)(n.p,{children:"... or"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"db.execute(\n    my_table\n        .filter(my_table.brand == 'Nike')\n        .limit(10)\n        .like(Document({'txt': 'something like this'}), index='my-index')\n)\n"})})]})}function a(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>s});var r=t(67294);const i={},o=r.createContext(i);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);